// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetConfigurationParams is parameters of getConfiguration operation.
type GetConfigurationParams struct {
	// The application for the configuration to get. Specify either the application name or the
	// application ID.
	Application string
	// The environment for the configuration to get. Specify either the environment name or the
	// environment ID.
	Environment string
	// The configuration to get. Specify either the configuration name or the configuration ID.
	Configuration string
	// The flag names of feature flag configuration.
	Flag []string
	// The evaluation context for feature flag configuration.
	Context []string
}

func unpackGetConfigurationParams(packed middleware.Parameters) (params GetConfigurationParams) {
	{
		key := middleware.ParameterKey{
			Name: "Application",
			In:   "path",
		}
		params.Application = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "Environment",
			In:   "path",
		}
		params.Environment = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "Configuration",
			In:   "path",
		}
		params.Configuration = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "flag",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Flag = v.([]string)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "Context",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.Context = v.([]string)
		}
	}
	return params
}

func decodeGetConfigurationParams(args [3]string, argsEscaped bool, r *http.Request) (params GetConfigurationParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: Application.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "Application",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Application = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Application",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: Environment.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "Environment",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Environment = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Environment",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: Configuration.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "Configuration",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Configuration = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Configuration",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: flag.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "flag",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotFlagVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotFlagVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.Flag = append(params.Flag, paramsDotFlagVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "flag",
			In:   "query",
			Err:  err,
		}
	}
	// Decode header: Context.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "Context",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotContextVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotContextVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.Context = append(params.Context, paramsDotContextVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Context",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}
