// Code generated by ogen, DO NOT EDIT.

package appconfigagentapi

import (
	"io"
	"net/http"

	"github.com/go-faster/errors"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

func encodeGetConfigurationResponse(response GetConfigurationRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetConfigurationOKHeaders:
		w.Header().Set("Content-Type", "application/octet-stream")
		// Encoding response headers.
		{
			h := uri.NewHeaderEncoder(w.Header())
			// Encode "ConfigurationVersion" header.
			{
				cfg := uri.HeaderParameterEncodingConfig{
					Name:    "ConfigurationVersion",
					Explode: false,
				}
				if err := h.EncodeParam(cfg, func(e uri.Encoder) error {
					if val, ok := response.ConfigurationVersion.Get(); ok {
						return e.EncodeValue(conv.StringToString(val))
					}
					return nil
				}); err != nil {
					return errors.Wrap(err, "encode ConfigurationVersion header")
				}
			}
		}
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		writer := w
		if _, err := io.Copy(writer, response.Response); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetConfigurationBadRequest:
		w.Header().Set("Content-Type", "application/text")
		w.WriteHeader(400)
		span.SetStatus(codes.Error, http.StatusText(400))

		writer := w
		if _, err := io.Copy(writer, response); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetConfigurationNotFound:
		w.Header().Set("Content-Type", "application/text")
		w.WriteHeader(404)
		span.SetStatus(codes.Error, http.StatusText(404))

		writer := w
		if _, err := io.Copy(writer, response); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetConfigurationInternalServerError:
		w.Header().Set("Content-Type", "application/text")
		w.WriteHeader(500)
		span.SetStatus(codes.Error, http.StatusText(500))

		writer := w
		if _, err := io.Copy(writer, response); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetConfigurationBadGateway:
		w.Header().Set("Content-Type", "application/text")
		w.WriteHeader(502)
		span.SetStatus(codes.Error, http.StatusText(502))

		writer := w
		if _, err := io.Copy(writer, response); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetConfigurationGatewayTimeout:
		w.Header().Set("Content-Type", "application/text")
		w.WriteHeader(504)
		span.SetStatus(codes.Error, http.StatusText(504))

		writer := w
		if _, err := io.Copy(writer, response); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
